# Nginx Configuration for Tailscale Tunneling to WSL Servers
# This configuration allows nginx to proxy requests to backend services
# running in WSL (Windows Subsystem for Linux) via Tailscale VPN tunnel

# Prerequisites:
# 1. Install Tailscale in WSL: curl -fsSL https://tailscale.com/install.sh | sh
# 2. Start Tailscale in WSL: sudo tailscale up
# 3. Get WSL Tailscale IP: tailscale ip -4
# 4. Install Tailscale on nginx host machine
# 5. Ensure both machines are in the same Tailnet

# CONFIGURATION VARIABLES TO REPLACE:
# - WSL_TAILSCALE_IP: Replace with your WSL machine's Tailscale IP (e.g., 100.x.x.x)
#   Find it by running: tailscale ip -4
# - WSL_BACKEND_PORT: Port where backend runs in WSL (default: 4000)
# - WSL_FRONTEND_PORT: Port where frontend dev server runs in WSL (default: 5173, or 80 for nginx)
# - YOUR_DOMAIN: Your public domain name (e.g., navigator.example.com)

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;

    # =========================================================================
    # UPSTREAM CONFIGURATION FOR TAILSCALE WSL SERVERS
    # =========================================================================

    # Backend server running in WSL via Tailscale
    # REPLACE '100.x.x.x' with your WSL Tailscale IP address
    upstream wsl_backend {
        # Option 1: Use Tailscale IP directly
        server 100.x.x.x:4000;

        # Option 2: Use Tailscale MagicDNS hostname (if enabled)
        # server your-wsl-hostname.tailnet-name.ts.net:4000;

        # Connection settings
        keepalive 32;
        keepalive_timeout 60s;
    }

    # Frontend server running in WSL via Tailscale (optional)
    # Use this if you want to proxy to a separate frontend server
    # For production, you typically serve static files directly from nginx
    upstream wsl_frontend {
        # Development server (Vite)
        server 100.x.x.x:5173;

        # OR nginx serving built frontend
        # server 100.x.x.x:80;
    }

    # =========================================================================
    # HTTP SERVER (Port 80)
    # =========================================================================

    server {
        listen 80;
        listen [::]:80;

        # Replace with your domain or use '_' for catch-all
        server_name YOUR_DOMAIN _;

        # Root directory for static files (if serving frontend from this nginx)
        root /usr/share/nginx/html;
        index index.html;

        # Client body size limit
        client_max_body_size 10M;

        # =====================================================================
        # API ENDPOINTS - Proxy to WSL Backend via Tailscale
        # =====================================================================

        location /api/ {
            proxy_pass http://wsl_backend/api/;
            proxy_http_version 1.1;

            # Essential proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Keep-alive for Tailscale connections
            proxy_set_header Connection "";

            # Timeouts (adjust based on your needs)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings for better performance over Tailscale
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://wsl_backend/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Shorter timeout for health checks
            proxy_connect_timeout 10s;
            proxy_read_timeout 10s;
        }

        # =====================================================================
        # WEBSOCKET SIGNALING - Proxy to WSL Backend via Tailscale
        # =====================================================================

        location /signaling {
            proxy_pass http://wsl_backend/signaling;
            proxy_http_version 1.1;

            # WebSocket upgrade headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket specific timeouts (longer for persistent connections)
            # Tailscale maintains connections well, but set reasonable limits
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for WebSocket (critical for real-time)
            proxy_buffering off;

            # Enable TCP keepalive for long-lived connections
            proxy_socket_keepalive on;
        }

        # =====================================================================
        # FRONTEND STATIC FILES
        # =====================================================================

        # Option 1: Serve pre-built static files from this nginx instance
        location / {
            try_files $uri $uri/ /index.html;

            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # No cache for HTML files
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }

        # Option 2: Proxy to frontend server in WSL (for development)
        # Uncomment below and comment out Option 1 to use this
        # location / {
        #     proxy_pass http://wsl_frontend;
        #     proxy_http_version 1.1;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #
        #     # For Vite HMR (Hot Module Replacement)
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }

        # =====================================================================
        # SECURITY HEADERS
        # =====================================================================

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Optional: Add Tailscale identity headers
        # Requires Tailscale nginx-auth setup
        # add_header X-Tailscale-User $http_tailscale_user always;
        # add_header X-Tailscale-Login $http_tailscale_login always;
    }

    # =========================================================================
    # HTTPS SERVER (Port 443) - Optional but Recommended
    # =========================================================================

    # Uncomment below to enable HTTPS
    # Tailscale also supports HTTPS certificates via Let's Encrypt

    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name YOUR_DOMAIN;
    #
    #     # SSL Certificate paths
    #     # Option 1: Let's Encrypt certificates
    #     ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;
    #
    #     # Option 2: Tailscale HTTPS certificates
    #     # ssl_certificate /var/lib/tailscale/certs/YOUR_DOMAIN.crt;
    #     # ssl_certificate_key /var/lib/tailscale/certs/YOUR_DOMAIN.key;
    #
    #     # SSL Configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #
    #     # All other location blocks same as HTTP server
    #     # ... (copy from above)
    # }

    # HTTP to HTTPS redirect
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name YOUR_DOMAIN;
    #     return 301 https://$server_name$request_uri;
    # }
}
