/**
 * Message and event definitions for the Navigator WebRTC signaling channel.
 *
 * The client communicates with the signaling service exclusively through JSON
 * payloads that follow the structures described in this module. Messages are
 * divided into two broad categories:
 *
 * - Requests that originate from the client (`SignalingClientMessage`).
 * - Notifications or acknowledgements that originate from the server
 *   (`SignalingServerMessage`).
 *
 * All request messages that expect a direct response include a `requestId`.
 * The server mirrors this identifier in the corresponding acknowledgement so
 * the client can pair responses to their originating request.
 */

import type { Participant, ParticipantRole } from './session';

/**
 * Shared shape used for every WebSocket message exchanged with the signaling
 * service.
 */
export interface SignalingMessageEnvelope<Type extends string, Payload> {
  /** Application specific discriminator describing the intent of the message. */
  readonly type: Type;
  /** Structured payload associated with the message. */
  readonly payload: Payload;
  /**
   * Optional correlation identifier. Requests issued by the client must
   * include this so that the server can attach it to the acknowledgement. The
   * identifier becomes optional on notifications which are not direct
   * responses to a request.
   */
  readonly requestId?: string;
}

/**
 * Messages that originate from the client.
 */
export type SignalingClientMessage =
  | SignalingMessageEnvelope<'authenticate', { token: string }>
  | SignalingMessageEnvelope<'create-room', { password: string }>
  | SignalingMessageEnvelope<
      'join-room',
      { roomId: string; password: string; role?: Exclude<ParticipantRole, 'facilitator'> }
    >
  | SignalingMessageEnvelope<'leave-room', Record<string, never>>
  | SignalingMessageEnvelope<
      'offer',
      { targetId: string; description: RTCSessionDescriptionInit }
    >
  | SignalingMessageEnvelope<
      'answer',
      { targetId: string; description: RTCSessionDescriptionInit }
    >
  | SignalingMessageEnvelope<
      'ice-candidate',
      { targetId: string; candidate: RTCIceCandidateInit }
    >;

/**
 * Payloads sent by the server that acknowledge room operations.
 */
export interface SignalingRoomAckPayloads {
  /**
   * Response to a `create-room` request. Includes the identifier of the newly
   * created room.
   */
  'room-created': { roomId: string };
  /**
   * Response to a `join-room` request. Provides the unique identifier assigned
   * to the participant inside the requested room.
   */
  'room-joined': { roomId: string; participantId: string; participants: Participant[] };
}

/**
 * Real-time notifications emitted by the server when room membership changes.
 */
export interface SignalingParticipantPayloads {
  /** A new participant joined the active room. */
  'participant-joined': { participantId: string; username: string; role: ParticipantRole };
  /** A participant left the active room. */
  'participant-left': { participantId: string };
}

/**
 * WebRTC signaling messages delivered by the server.
 */
export interface SignalingRtcPayloads {
  /** Offer generated by another participant. */
  offer: { from: string; description: RTCSessionDescriptionInit };
  /** Answer generated by another participant in response to a local offer. */
  answer: { from: string; description: RTCSessionDescriptionInit };
  /** ICE candidate discovered by another participant. */
  'ice-candidate': { from: string; candidate: RTCIceCandidateInit };
}

/**
 * Error payload forwarded by the server. If the error is a direct response to
 * a request the corresponding `requestId` is also included.
 */
export type SignalingErrorPayload = {
  /** Human-readable explanation of what went wrong. */
  message: string;
  /** Optional machine friendly code for programmatic handling. */
  code?: string;
};

/**
 * Union of every server originated message.
 */
export type SignalingServerMessage =
  | SignalingMessageEnvelope<'room-created', SignalingRoomAckPayloads['room-created']>
  | SignalingMessageEnvelope<'room-joined', SignalingRoomAckPayloads['room-joined']>
  | SignalingMessageEnvelope<
      'participant-joined',
      SignalingParticipantPayloads['participant-joined']
    >
  | SignalingMessageEnvelope<
      'participant-left',
      SignalingParticipantPayloads['participant-left']
    >
  | SignalingMessageEnvelope<'offer', SignalingRtcPayloads['offer']>
  | SignalingMessageEnvelope<'answer', SignalingRtcPayloads['answer']>
  | SignalingMessageEnvelope<'ice-candidate', SignalingRtcPayloads['ice-candidate']>
  | SignalingMessageEnvelope<'error', SignalingErrorPayload>;

/**
 * Mapping between user-consumable event names and payload shapes emitted by
 * the {@link SignalingClient}.
 */
export interface SignalingClientEventMap {
  /** WebSocket connection established successfully. */
  connected: undefined;
  /** WebSocket connection closed. */
  disconnected: { code: number; reason: string };
  /** Automatic reconnection attempt scheduled. */
  reconnecting: { attempt: number; delay: number };
  /** WebSocket connection restored after an interruption. */
  reconnected: undefined;
  /** Room creation acknowledgement received. */
  roomCreated: SignalingRoomAckPayloads['room-created'];
  /** Room join acknowledgement received. */
  roomJoined: SignalingRoomAckPayloads['room-joined'];
  /** Another participant joined the room. */
  participantJoined: SignalingParticipantPayloads['participant-joined'];
  /** A participant left the room. */
  participantLeft: SignalingParticipantPayloads['participant-left'];
  /** Offer from a remote participant received. */
  offer: SignalingRtcPayloads['offer'];
  /** Answer from a remote participant received. */
  answer: SignalingRtcPayloads['answer'];
  /** ICE candidate from a remote participant received. */
  iceCandidate: SignalingRtcPayloads['ice-candidate'];
  /** Non-fatal error reported by the signaling service. */
  error: SignalingErrorPayload;
}

/**
 * Convenience helper for deriving the function signature expected for an
 * event handler based on its event name.
 */
export type SignalingEventHandler<Event extends keyof SignalingClientEventMap> =
  SignalingClientEventMap[Event] extends undefined
    ? () => void
    : (payload: SignalingClientEventMap[Event]) => void;

/**
 * Internal structure used to track inflight requests awaiting acknowledgement
 * from the signaling service.
 */
export interface SignalingPendingRequest {
  readonly resolve: (
    value: SignalingRoomAckPayloads[SignalingRequestType],
  ) => void;
  readonly reject: (error: Error) => void;
  readonly expectedType: SignalingRequestType;
}

/**
 * Helper union enumerating all message types initiated by the client that
 * require an acknowledgement.
 */
export type SignalingRequestType = keyof SignalingRoomAckPayloads;
